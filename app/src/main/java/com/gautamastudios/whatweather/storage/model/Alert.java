package com.gautamastudios.whatweather.storage.model;

import android.arch.persistence.room.ColumnInfo;
import android.arch.persistence.room.Entity;
import android.arch.persistence.room.PrimaryKey;
import android.content.ContentValues;

/**
 * The alerts array contains objects representing the severe weather warnings issued for the requested location by a
 * governmental authority (please see our @see <a href="https://darksky.net/dev/docs/sources">data
 * sources page</a> for a list of sources). Objects in the alerts array contain the following properties:
 * <p>
 * {@link Alert#description} required
 * A detailed description of the alert.
 * <p>
 * {@link Alert#expires} optional
 * The UNIX time at which the alert will expire. (Some alerts sources, unfortunately, do not define expiration time,
 * and in these cases this parameter will not be defined.)
 * <p>
 * {@link Alert#regions} required
 * A json array of strings representing the names of the regions covered by this weather alert. This data type needs
 * to be deserialized to a java object.
 * <p>
 * {@link Alert#severity} required
 * The severity of the weather alert. Will take one of the following values: "advisory" (an individual should be
 * aware of potentially severe weather), "watch" (an individual should prepare for potentially severe weather), or
 * "warning" (an individual should take immediate action to protect themselves and others from potentially severe
 * weather).
 * <p>
 * {@link Alert#time} required
 * The UNIX time at which the alert was issued.
 * <p>
 * {@link Alert#title} required
 * A brief description of the alert.
 * <p>
 * {@link Alert#uri} required
 * An HTTP(S) URI that one may refer to for detailed information about the alert.
 */
@Entity(tableName = Alert.TABLE_NAME)
public class Alert {

    public static final String TABLE_NAME = "alert";

    public static final String FIELD_PRIMARY_KEY = "primary_key";
    public static final String FIELD_DESCRIPTION = "description";
    public static final String FIELD_EXPIRES = "expires";
    public static final String FIELD_REGIONS = "regions";
    public static final String FIELD_SEVERITY = "severity";
    public static final String FIELD_TIME = "time";
    public static final String FIELD_TITLE = "title";
    public static final String FIELD_URI = "uri";

    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = FIELD_PRIMARY_KEY)
    public long autoGeneratedKey;

    @ColumnInfo(name = FIELD_DESCRIPTION)
    public String description;

    @ColumnInfo(name = FIELD_EXPIRES)
    public long expires;

    @ColumnInfo(name = FIELD_REGIONS)
    public String regions;

    @ColumnInfo(name = FIELD_SEVERITY)
    public String severity;

    @ColumnInfo(name = FIELD_TIME)
    public long time;

    @ColumnInfo(name = FIELD_TITLE)
    public String title;

    @ColumnInfo(name = FIELD_URI)
    public String uri;

    /**
     * Create a new {@link Alert} from the specified {@link ContentValues}.
     *
     * @param values A {@link ContentValues} that contains {@link #FIELD_PRIMARY_KEY}, {@link #FIELD_DESCRIPTION},
     *               {@link #FIELD_EXPIRES}, {@link #FIELD_REGIONS}, {@link #FIELD_SEVERITY}, {@link #FIELD_TIME},
     *               {@link #FIELD_TITLE}, {@link #FIELD_URI}
     * @return An instance of {@link Alert}.
     */
    public static Alert fromContentValues(ContentValues values) {
        final Alert alert = new Alert();
        if (values.containsKey(FIELD_PRIMARY_KEY)) {
            alert.autoGeneratedKey = values.getAsLong(FIELD_PRIMARY_KEY);
        }
        if (values.containsKey(FIELD_DESCRIPTION)) {
            alert.description = values.getAsString(FIELD_DESCRIPTION);
        }
        if (values.containsKey(FIELD_EXPIRES)) {
            alert.expires = values.getAsLong(FIELD_EXPIRES);
        }
        if (values.containsKey(FIELD_REGIONS)) {
            alert.regions = values.getAsString(FIELD_REGIONS);
        }
        if (values.containsKey(FIELD_SEVERITY)) {
            alert.severity = values.getAsString(FIELD_SEVERITY);
        }
        if (values.containsKey(FIELD_TIME)) {
            alert.time = values.getAsLong(FIELD_TIME);
        }
        if (values.containsKey(FIELD_TITLE)) {
            alert.title = values.getAsString(FIELD_TITLE);
        }
        if (values.containsKey(FIELD_URI)) {
            alert.uri = values.getAsString(FIELD_URI);
        }
        return alert;
    }
}
